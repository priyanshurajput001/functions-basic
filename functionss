{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNfjj4ghiGgAbaUgXVGUBaw"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bstd9xPA2J-A","executionInfo":{"status":"ok","timestamp":1734761615486,"user_tz":-330,"elapsed":6,"user":{"displayName":"Priyanshu Rajput","userId":"13435041473983326694"}},"outputId":"9d256ba9-0266-422c-96cf-92d67ff40ecc"},"outputs":[{"output_type":"stream","name":"stdout","text":["12\n"]}],"source":["# 1. Sum of All Even Numbers in a List\n","# python\n","def sum_of_even_numbers(numbers):\n","    return sum(num for num in numbers if num % 2 == 0)\n","\n","# Example usage\n","numbers = [1, 2, 3, 4, 5, 6]\n","print(sum_of_even_numbers(numbers))"]},{"cell_type":"code","source":["# 2. Reverse a String\n","# python\n","def reverse_string(s):\n","    return s[::-1]\n","\n","# Example usage\n","string = \"Hello\"\n","print(reverse_string(string))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a2bgM5c02TEh","executionInfo":{"status":"ok","timestamp":1734761616216,"user_tz":-330,"elapsed":6,"user":{"displayName":"Priyanshu Rajput","userId":"13435041473983326694"}},"outputId":"8cd72ec6-45b4-4c35-b912-d74cef0d8d7c"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["olleH\n"]}]},{"cell_type":"code","source":["# 3. Squares of Each Number in a List\n","# python\n","def square_numbers(numbers):\n","    return [num ** 2 for num in numbers]\n","\n","# Example usage\n","numbers = [1, 2, 3, 4]\n","print(square_numbers(numbers))"],"metadata":{"id":"DwFaBQbN2TBV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 4. Check if a Number is Prime (1 to 200)\n","# python\n","def is_prime(n):\n","    if n <= 1:\n","        return False\n","    for i in range(2, int(n ** 0.5) + 1):\n","        if n % i == 0:\n","            return False\n","    return True\n","\n","# Example usage\n","for num in range(1, 201):\n","    if is_prime(num):\n","        print(num, end=\" \")  # Output: prime numbers from 1 to 200\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uLqm67aJ2hFy","executionInfo":{"status":"ok","timestamp":1734761740535,"user_tz":-330,"elapsed":531,"user":{"displayName":"Priyanshu Rajput","userId":"13435041473983326694"}},"outputId":"4ee08ca8-238d-4ef9-ef6b-157e209945e5"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193 197 199 "]}]},{"cell_type":"code","source":["# 5. Fibonacci Sequence Iterator\n","# python\n","class Fibonacci:\n","    def __init__(self, n):\n","        self.n = n\n","        self.a = 0\n","        self.b = 1\n","        self.count = 0\n","\n","    def __iter__(self):\n","        return self\n","\n","    def __next__(self):\n","        if self.count < self.n:\n","            self.count += 1\n","            if self.count == 1:\n","                return self.a\n","            elif self.count == 2:\n","                return self.b\n","            else:\n","                self.a, self.b = self.b, self.a + self.b\n","                return self.b\n","        else:\n","            raise StopIteration\n","\n","# Example usage\n","fib = Fibonacci(10)\n","for num in fib:\n","    print(num, end=\" \")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HwKPqvWl2g7Y","executionInfo":{"status":"ok","timestamp":1734761806054,"user_tz":-330,"elapsed":449,"user":{"displayName":"Priyanshu Rajput","userId":"13435041473983326694"}},"outputId":"ab26ab55-a75a-4541-81bd-ad67601d53f7"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["0 1 1 2 3 5 8 13 21 34 "]}]},{"cell_type":"code","source":["# .7 Generator Function to Read File Line by Line\n","# python\n","def read_file_line_by_line(file_path):\n","    with open(file_path, 'r') as file:\n","        for line in file:\n","            yield line.strip()\n","\n","# Example usage\n","for line in read_file_line_by_line('example.txt'):\n","    print"],"metadata":{"id":"kbPRxcVw2gw5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 8. Lambda Function to Sort List of Tuples\n","# python\n","tuples_list = [(1, 3), (4, 1), (5, 2)]\n","sorted_list = sorted(tuples_list, key=lambda x: x[1])\n","print(sorted_list)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_ysb3Ctp2gmM","executionInfo":{"status":"ok","timestamp":1734761905085,"user_tz":-330,"elapsed":439,"user":{"displayName":"Priyanshu Rajput","userId":"13435041473983326694"}},"outputId":"e8b85df4-5eb1-413d-e46d-040a57b46784"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["[(4, 1), (5, 2), (1, 3)]\n"]}]},{"cell_type":"code","source":["# 9. Convert Celsius to Fahrenheit Using map()\n","# python\n","def celsius_to_fahrenheit(celsius):\n","    return (celsius * 9/5) + 32\n","\n","celsius_temperatures = [0, 20, 30, 40]\n","fahrenheit_temperatures = list(map(celsius_to_fahrenheit, celsius_temperatures))\n","print(fahrenheit_temperatures)"],"metadata":{"id":"enCPLtlN2gWr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 10. Remove Vowels Using filter()\n","# python\n","def remove_vowels(s):\n","    vowels = \"aeiouAEIOU\"\n","    return ''.join(filter(lambda x: x not in vowels, s))\n","\n","# Example usage\n","string = \"Hello World\"\n","print(remove_vowels(string))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7UJjTTbw3pFR","executionInfo":{"status":"ok","timestamp":1734761952930,"user_tz":-330,"elapsed":463,"user":{"displayName":"Priyanshu Rajput","userId":"13435041473983326694"}},"outputId":"2f2d0224-d92d-42fb-80a0-3a19a9810ab9"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Hll Wrld\n"]}]},{"cell_type":"markdown","source":["1. Difference between Function and Method\n","In Python, a function is a block of reusable code that performs a specific task. It's defined using the def keyword. A method, on the other hand, is a function that is associated with an object (like a string or a list). You call methods on objects using the dot notation (e.g., my_string.upper()).\n","\n","Key Difference: Methods are inherently tied to objects, while functions are more general-purpose.\n","\n","2. Function Arguments and Parameters\n","Parameters are the placeholders you define in a function's definition to receive input values. Arguments are the actual values you pass to a function when you call it.\n","\n","Example:\n","\n","\n","def greet(name):  # 'name' is a parameter\n","    print(f\"Hello, {name}!\")\n","\n","greet(\"Alice\")  # \"Alice\" is an argument\n","Use code with caution\n","3. Defining and Calling Functions\n","Defining a function:\n","\n","\n","def function_name(parameter1, parameter2):\n","    # Code block\n","    # ...\n","    return value  # Optional return statement\n","\n","Calling a function:\n","\n","\n","result = function_name(argument1, argument2)\n","\n","\n","4. Purpose of the return Statement\n","The return statement is used to specify the value that a function should give back when it's called. If a function doesn't have a return statement, it implicitly returns None.\n","\n","5. Iterators vs. Iterables\n","An iterable is any object that can be looped over (like lists, strings, tuples). An iterator is an object that represents a stream of data. You can get an iterator from an iterable using the iter() function. Iterators use the __next__() method to retrieve the next item in the sequence.\n","\n","6. Generators in Python\n","A generator is a special type of function that uses the yield keyword instead of return. When called, it doesn't execute the code immediately but returns a generator object. Each time you call next() on the generator object, it executes until it hits a yield statement, producing a value. This makes generators memory-efficient for working with large data streams.\n","\n","7. Advantages of Generators\n","Memory Efficiency: Generators produce values one at a time, saving memory compared to storing all values in a list.\n","Lazy Evaluation: Values are generated only when needed, improving performance.\n","Representing Infinite Sequences: Generators can represent sequences that would be impossible to store in memory.\n","\n","8. Lambda Functions\n","A lambda function is a small, anonymous function defined using the lambda keyword. They are often used for short, simple operations that don't require a full function definition.\n","\n","Example:\n","\n","\n","square = lambda x: x * x\n","print(square(5))  # Output: 25\n","\n","9. map() Function\n","The map() function applies a given function to each item in an iterable and returns an iterator of the results.\n","\n","Example:\n","\n","\n","numbers = [1, 2, 3, 4]\n","squares = map(lambda x: x * x, numbers)\n","print(list(squares))  # Output: [1, 4, 9, 16]\n","\n","10. map(), reduce(), and filter()\n","\n","map(): Applies a function to all elements of an iterable.\n","reduce(): Applies a function cumulatively to the items of an iterable, reducing it to a single value. You need to import it from functools: from functools import reduce.\n","filter(): Filters elements of an iterable based on a function that returns True or False.        "],"metadata":{"id":"IweF0EJ-4huy"}}]}